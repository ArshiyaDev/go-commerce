definitions:
  controller.Response:
    properties:
      code:
        type: integer
      status:
        type: string
    type: object
  entities.CreateUserRequest:
    properties:
      email:
        example: john.doe@example.com
        type: string
      last_name:
        example: Doe
        type: string
      name:
        example: John
        type: string
      status:
        allOf:
        - $ref: '#/definitions/entities.Status'
        example: active
      telephone:
        example: "+1234567890"
        type: string
    required:
    - email
    - last_name
    - name
    - status
    - telephone
    type: object
  entities.Status:
    enum:
    - active
    - inactive
    - verified
    - suspend
    type: string
    x-enum-varnames:
    - Active
    - Inactive
    - Verified
    - Suspend
  entities.User:
    properties:
      created_at:
        type: string
      email:
        description: Need Validation for email format
        type: string
      id:
        type: string
      last_name:
        type: string
      name:
        type: string
      status:
        $ref: '#/definitions/entities.Status'
      telephone:
        type: string
      updated_at:
        type: string
    type: object
info:
  contact: {}
paths:
  /api/v1/users:
    post:
      consumes:
      - application/json
      description: Create a user with name, last name, email, and telephone
      parameters:
      - description: Create User Request
        in: body
        name: request
        required: true
        schema:
          $ref: '#/definitions/entities.CreateUserRequest'
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/controller.Response'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/controller.Response'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/controller.Response'
      summary: Create a new user
      tags:
      - users
  /api/v1/users/{email}:
    get:
      consumes:
      - application/json
      description: Retrieve a user by their username
      parameters:
      - description: Email
        in: path
        name: email
        required: true
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/entities.User'
        "404":
          description: Not Found
          schema:
            $ref: '#/definitions/controller.Response'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/controller.Response'
      summary: Get user by username
      tags:
      - users
swagger: "2.0"
